import pandas as pd import matplotlib as mpl
import matplotlib.pyplot as plt




import tensorflow as tf
from tensorflow .keras.models import Model import numpy as np



#from sklearn.metrics import accuracy_score,prcision_score,recall_score from sklearn.model_selection import train_test_split
#from sklearn.preprocessing import StandardScalar
from sklearn.preprocessing import MinMaxScaler, StandardScaler




#mpl.rcParas['figure.figsize'] = (10,8) #mpl.rcParas['axes.grid'] = False



from tensorflow.keras.datasets import fashion_mnist




(x_train, _), (x_test, _) = fashion_mnist.load_data()




len(x_train)
 



#len(x_test)




len(x_test)




x_test.shape




x_test[0]




plt.matshow(x_test[0])


plt.matshow(x_test[67])




plt.matshow(x_test[6])




latent_dim =64
class Autoencoder(Model):
def __init (self, latent_dim): super(Autocender, self). init () self.latent_dim = latent_dim self.encoder = tf.keras.Sequential([
layers.Flatten(),
 
layers.Dense(latent_dim, activation='relu'),

])
self.decoder = tf.keras.Sequential([ layers.Dense(784, activation='sigmoid'), layers.Reshape((28,28))
])


def call(self, x):
encoded = self.encoder(x) decoded = self.decoder(encoded) return decoded

autocender =Autocender(latent_dim) autocender.fit(x_train, x_train,
epchos=10, shuffle=True,
validation_data=(x_test, x_test)) encoded_imgs = autoencoder.encoder(x_test).numpy()
decoded_imgs = autoencoder.decoder(encoded_imgs).numpy()





n = 10
plt.figure(figsize=(20, 4)) for i in range(n):
# display original
ax = plt.subplot(2, n, i + 1) plt.gray() ax.get_xaxis().set_visible(False)
 
ax.get_yaxis().set_visible(False) ax = plt.subplot(2, n, i + 1 + n) plt.imshow(decoded_imgs[i]) plt.title("reconstructed") plt.gray() ax.get_xaxis().set_visible(False) ax.get_yaxis().set_visible(False) plt.show()





# display reconstruction
ax = plt.subplot(2, n, i + 1 + n) plt.imshow(decoded_imgs[i]) plt.title("reconstructed") plt.gray() ax.get_xaxis().set_visible(false) ax.get_yaxis().set_visible(false) plt.show()



plt.matshow(x_test[0])
